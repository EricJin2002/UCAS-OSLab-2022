--- init/main.c	2022-09-18 22:44:39.488943590 +0800
+++ init/main.c	2022-09-18 22:44:39.488943590 +0800
@@ -1,39 +1,70 @@
+/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * * *
+ *            Copyright (C) 2018 Institute of Computing Technology, CAS
+ *               Author : Han Shukai (email : hanshukai@ict.ac.cn)
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * * *
+ *         The kernel's entry, where most of the initialization work is done.
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * * *
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this
+ * software and associated documentation files (the "Software"), to deal in the Software
+ * without restriction, including without limitation the rights to use, copy, modify,
+ * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
+ * persons to whom the Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ *
+ * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * * */
+
 #include <common.h>
 #include <asm.h>
-#include <os/bios.h>
+#include <asm/unistd.h>
+#include <os/loader.h>
+#include <os/irq.h>
+#include <os/sched.h>
+#include <os/lock.h>
+#include <os/kernel.h>
 #include <os/task.h>
 #include <os/string.h>
-#include <os/loader.h>
+#include <os/mm.h>
+#include <os/time.h>
+#include <sys/syscall.h>
+#include <screen.h>
+#include <printk.h>
+#include <assert.h>
 #include <type.h>
+#include <csr.h>
 
-#define VERSION_BUF 50
-
-int version = 2; // version must between 0 and 9
-char buf[VERSION_BUF];
+extern void ret_from_exception();
 
 // Task info array
 task_info_t tasks[TASK_MAXNUM];
 
-static int bss_check(void)
-{
-    for (int i = 0; i < VERSION_BUF; ++i)
-    {
-        if (buf[i] != 0)
-        {
-            return 0;
-        }
-    }
-    return 1;
-}
-
-static void init_bios(void)
+static void init_jmptab(void)
 {
-    volatile long (*(*jmptab))() = (volatile long (*(*))())BIOS_JMPTAB_BASE;
+    volatile long (*(*jmptab))() = (volatile long (*(*))())KERNEL_JMPTAB_BASE;
 
     jmptab[CONSOLE_PUTSTR]  = (long (*)())port_write;
     jmptab[CONSOLE_PUTCHAR] = (long (*)())port_write_ch;
     jmptab[CONSOLE_GETCHAR] = (long (*)())port_read_ch;
     jmptab[SD_READ]         = (long (*)())sd_read;
+    jmptab[QEMU_LOGGING]    = (long (*)())qemu_logging;
+    jmptab[SET_TIMER]       = (long (*)())set_timer;
+    jmptab[READ_FDT]        = (long (*)())read_fdt;
+    jmptab[MOVE_CURSOR]     = (long (*)())screen_move_cursor;
+    jmptab[PRINT]           = (long (*)())printk;
+    jmptab[YIELD]           = (long (*)())do_scheduler;
+    jmptab[MUTEX_INIT]      = (long (*)())do_mutex_lock_init;
+    jmptab[MUTEX_ACQ]       = (long (*)())do_mutex_lock_acquire;
+    jmptab[MUTEX_RELEASE]   = (long (*)())do_mutex_lock_release;
 }
 
 static void init_task_info(void)
@@ -42,44 +73,86 @@ static void init_task_info(void)
     // NOTE: You need to get some related arguments from bootblock first
 }
 
-int main(void)
+static void init_pcb_stack(
+    ptr_t kernel_stack, ptr_t user_stack, ptr_t entry_point,
+    pcb_t *pcb)
 {
-    // Check whether .bss section is set to zero
-    int check = bss_check();
+     /* TODO: [p2-task3] initialization of registers on kernel stack
+      * HINT: sp, ra, sepc, sstatus
+      * NOTE: To run the task in user mode, you should set corresponding bits
+      *     of sstatus(SPP, SPIE, etc.).
+      */
+    regs_context_t *pt_regs =
+        (regs_context_t *)(kernel_stack - sizeof(regs_context_t));
 
-    // Init jump table provided by BIOS (ΦωΦ)
-    init_bios();
+
+    /* TODO: [p2-task1] set sp to simulate just returning from switch_to
+     * NOTE: you should prepare a stack, and push some values to
+     * simulate a callee-saved context.
+     */
+    switchto_context_t *pt_switchto =
+        (switchto_context_t *)((ptr_t)pt_regs - sizeof(switchto_context_t));
+
+}
+
+static void init_pcb(void)
+{
+    /* TODO: [p2-task1] load needed tasks and init their corresponding PCB */
+
+
+    /* TODO: [p2-task1] remember to initialize 'current_running' */
+
+}
+
+static void init_syscall(void)
+{
+    // TODO: [p2-task3] initialize system call table.
+}
+
+int main(void)
+{
+    // Init jump table provided by kernel and bios(ΦωΦ)
+    init_jmptab();
 
     // Init task information (〃'▽'〃)
     init_task_info();
 
-    // Output 'Hello OS!', bss check result and OS version
-    char output_str[] = "bss check: _ version: _\n\r";
-    char output_val[2] = {0};
-    int i, output_val_pos = 0;
+    // Init Process Control Blocks |•'-'•) ✧
+    init_pcb();
+    printk("> [INIT] PCB initialization succeeded.\n");
 
-    output_val[0] = check ? 't' : 'f';
-    output_val[1] = version + '0';
-    for (i = 0; i < sizeof(output_str); ++i)
-    {
-        buf[i] = output_str[i];
-        if (buf[i] == '_')
-        {
-            buf[i] = output_val[output_val_pos++];
-        }
-    }
+    // Read CPU frequency (｡•ᴗ-)_
+    time_base = bios_read_fdt(TIMEBASE);
 
-    bios_putstr("Hello OS!\n\r");
-    bios_putstr(buf);
+    // Init lock mechanism o(´^｀)o
+    init_locks();
+    printk("> [INIT] Lock mechanism initialization succeeded.\n");
 
-    // TODO: Load tasks by either task id [p1-task3] or task name [p1-task4],
-    //   and then execute them.
+    // Init interrupt (^_^)
+    init_exception();
+    printk("> [INIT] Interrupt processing initialization succeeded.\n");
+
+    // Init system call table (0_0)
+    init_syscall();
+    printk("> [INIT] System call initialized successfully.\n");
+
+    // Init screen (QAQ)
+    init_screen();
+    printk("> [INIT] SCREEN initialization succeeded.\n");
+
+    // TODO: [p2-task4] Setup timer interrupt and enable all interrupt globally
+    // NOTE: The function of sstatus.sie is different from sie's
 
 
     // Infinite while loop, where CPU stays in a low-power state (QAQQQQQQQQQQQ)
     while (1)
     {
-        asm volatile("wfi");
+        // If you do non-preemptive scheduling, it's used to surrender control
+        do_scheduler();
+
+        // If you do preemptive scheduling, they're used to enable CSR_SIE and wfi
+        // enable_preempt();
+        // asm volatile("wfi");
     }
 
     return 0;
